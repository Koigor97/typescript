{"mappings":"AAAA,yBAAyB;AAKzB,MAAM,SAAiB,CAAC,OAAO;IAC7B,IAAI,SAAS,EAAE;IAEf,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,IAAI,OAAO,KAAK,CAAC,EAAE;QACnB,IAAI,UAAU,OAAO,OAAO,IAAI,CAAC;IACnC;IAEA,OAAO;AACT;AAEA,SAAS,aAAa,IAAY;IAChC,OAAO,OAAO,MAAM;AACtB;AAEA,MAAM,UAAU;IAAC;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;CAAG;AAEnE,QAAQ,GAAG,CAAC,OAAO,SAAS,gBAE5B,qCAAqC;CACrC,sBAAsB;CACtB,wDAAwD;CACxD,KAAK","sources":["src/ts-intro/generics.ts"],"sourcesContent":["// Generics in TypeScript\ntype Filter = {\n  <T>(array: T[], predicate: (item: T) => boolean): T[];\n};\n\nconst filter: Filter = (array, predicate) => {\n  let result = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i];\n    if (predicate(item)) result.push(item);\n  }\n\n  return result;\n};\n\nfunction divideEvenly(item: number) {\n  return item % 2 === 0;\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\nconsole.log(filter(numbers, divideEvenly));\n\n// other way of writing generic types\n// type Filter2<T> = {\n//   (array: T[], predicate: (item: T) => boolean): T[];\n// };\n"],"names":[],"version":3,"file":"index.a9443ee2.js.map","sourceRoot":"../"}