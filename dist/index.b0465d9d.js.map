{"mappings":"AAAA,0BAA0B;AAC1B,MAAM,WAAW,CAAC,GAAW,IAAsB,IAAI;AACvD,6CAA6C;AAE7C,8BAA8B;AAC9B,UAAU;AACV,IAAI,YAAiB;AACrB,iDAAiD;AACjD,wBAAwB;AAExB,YAAY;AACZ,iDAAiD;AACjD,uBAAuB;AAEvB,YAAY;IACV;IACA;IACA;IACA;QAAE,OAAO;QAAe,KAAK;IAAqB;CACnD;AACD,iDAAiD;AACjD,mDAAmD;AAEnD,eAAe;AACf,gDAAgD;AAChD,gCAAgC;AAChC,KAAK;AAEL,sCAAsC;AACtC,4CAA4C;AAE5C,wBAAwB;AACxB,MAAM,cAAc,SAAU,GAAY;IACxC,IAAI,OAAO,QAAQ,UAAU,OAAO,KAAK,KAAK,CAAC,MAAM;SAChD,OAAO;AACd;AAEA,sCAAsC;AACtC,kGAAkG;AAElG,eAAe;AACf,IAAI;AACJ,cAAc;AACd,4BAA4B;AAE5B,cAAc;AACd,4BAA4B;AAE5B,eAAe;AACf,MAAM,MAAc;AACpB,MAAM,QAAgB,MAAM;AAE5B,oBAAoB;AACpB,sBAAsB;AAEtB,cAAc;AACd,MAAM,SAAS,UAAU,EAAE,qBAAqB;AAChD,MAAM,aAAa,OAAO,gBAAgB;AAC1C,8CAA8C;AAC9C,kDAAkD;AAClD,kDAAkD;AAElD,aAAa;AACb,iBAAiB;AACjB,MAAM,MAAM;IACV,MAAM;IACN,gBAAgB;AAClB;AAEA,iBAAiB;AACjB,MAAM,UAIF;IACF,MAAM;IACN,YAAY;IACZ,QAAQ;QAAC;QAAgB;QAAY;QAAa;KAAS;AAC7D;AAqBA,gBAAgB;AAChB,MAAM,eAAyB;IAC7B,MAAM;IACN,SAAS;IACT,aAAa;IACb,SAAS;AACX;AAEA,MAAM,aAAoB;IACxB,UAAU;IACV,MAAM;IACN,aAAa,IAAI,OAAO,YAAY;IACpC,OAAO;IACP,UAAU;QAAE,GAAG,YAAY;IAAC;AAC9B;AAsBA,MAAM,YAAqB;IACzB,MAAM;IACN,UAAU;IACV,cAAc;IACd,aAAa;IACb,cAAc;AAChB;AAOA,MAAM,SAAkB;IACtB,MAAM;IACN,UAAU;IACV,cAAc;IACd,aAAa;IACb,cAAc;AAChB;AAEA,uBAAuB;AAEvB,sBAAsB;AACtB,MAAM,SAAmB;IAAC;IAAI;IAAI;IAAI;IAAI;IAAI;CAAI;AAClD,8BAA8B;AAC9B,MAAM,cAAwC;IAC5C;IACA;IACA;QAAE,SAAS;QAAI,MAAM;QAAI,aAAa;IAAG;CAC1C;AAED,uBAAuB;AACvB,4BAA4B;AAE5B,uBAAuB;AACvB,IAAI;AACJ,cAAc;IAAC;IAAS;IAAI;CAAM;AAClC,4BAA4B;AAE5B,sBAAsB;AACtB,MAAM,WAAW,IAAY,QAAQ,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,OAAO;AAChE,MAAM,eAAe;IACnB,MAAM,IAAI,MAAM;AAClB;;AAEA,cAAc;AACd,kBAAkB;AAElB,YAAY;UACP;;;;GAAA,eAAA;AAaL,MAAM,SAAsB;IAC1B,MAAM;IACN,IAAI;IACJ,UAAU;IACV,QAAQ;AACV;AAEA,QAAQ,GAAG,CAAC","sources":["src/ts-intro/index.ts"],"sourcesContent":["// example of typescript..\nconst multiply = (a: number, b: number): number => a * b;\n// console.log(multiply(5, 2)); // output: 10\n\n// The different type of types\n//ANY type\nlet firstName: any = \"Mark\";\n// console.log(`firstName is now: ${firstName}`);\n//firstName is now: Mark\n\nfirstName = 365;\n// console.log(`firstName is now: ${firstName}`);\n//firstName is now: 365\n\nfirstName = [\n  \"Jerry\",\n  35,\n  \"Mary\",\n  { skill: \"programming\", job: \"Software Developer\" },\n];\n// console.log(`firstName is now: ${firstName}`);\n// firstName is now: Jerry,35,Mary,[object, object]\n\n// UNKNOWN type\n// const divideByTwo = function (num: unknown) {\n//   return Math.floor(num / 2);\n// };\n\n// console.log(divideByTwo(32)); // 16\n// console.log(divideByTwo(\"pizza\")); // NaN\n\n// A better way would be\nconst divideByTwo = function (num: unknown) {\n  if (typeof num === \"number\") return Math.floor(num / 2);\n  else return \"This function takes a number. Please enter a valid number\";\n};\n\n// console.log(divideByTwo(32)); // 16\n// console.log(divideByTwo(\"pizza\")); // This function takes a number. Please enter a valid number\n\n// BOOLEAN type\nlet booleanType: boolean;\nbooleanType = true;\n// console.log(booleanType);\n\nbooleanType = 1 > 0;\n// console.log(booleanType);\n\n// NUMBER type;\nconst num: number = 27;\nconst total: number = num * 28;\n\n// console.log(num);\n// console.log(total);\n\n// BIGINT type\nconst bigInt = 834624515n; // the javaScript way\nconst maximumInt = Number.MAX_SAFE_INTEGER;\n// console.log(maximumInt); //9007199254740991\n// console.log(maximumInt + 1); //9007199254740992\n// console.log(maximumInt + 2); //9007199254740992\n\n//OBJECT type\n// JavaScript way\nconst job = {\n  name: \"Software Developer\",\n  salaryPerMonth: 10_000,\n};\n\n// TypeScript way\nconst country: {\n  name: string;\n  population: number;\n  cities: string[];\n} = {\n  name: \"South Africa\",\n  population: 59_000_039,\n  cities: [\"Johannesburg\", \"Pretoria\", \"Cape Town\", \"Durban\"],\n};\n\n//console.log(job);\n// console.log(country);\n\n// example of using the 'type' keyword\ntype Order = {\n  foodName: string;\n  code: number;\n  collectTime: string;\n  price: number;\n  customer: {};\n};\n\ntype Customer = {\n  name: string;\n  address: string;\n  phoneNumber: number;\n  hasPaid: boolean;\n};\n\n// usage of type\nconst customerInfo: Customer = {\n  name: \"Sarah Alpha\",\n  address: \"360 Ridge View, Belverly Hill\",\n  phoneNumber: 3764910923,\n  hasPaid: true,\n};\n\nconst pizzaPalor: Order = {\n  foodName: \"italiano Pizza\",\n  code: 237006,\n  collectTime: new Date().toDateString(),\n  price: 80,\n  customer: { ...customerInfo },\n};\n\n// console.log(pizzaPalor);\n\n// UNION type\n\ntype ElectricVehicle = {\n  name: string;\n  category: string;\n  canSelfDrive: boolean;\n  batteryLife: number;\n};\n\ntype RegularVehicle = {\n  name: string;\n  category: string;\n  tankCapacity: number;\n  milesDriven: number;\n};\n\ntype Vehicle = ElectricVehicle | RegularVehicle;\n\nconst koiMotors: Vehicle = {\n  name: \"Koi Motors\",\n  category: \"CrossOver-Hybrid\",\n  tankCapacity: 68.5,\n  batteryLife: 90,\n  canSelfDrive: true,\n};\n\n// console.log(koiMotors);\n\n// INTERSECTION type\ntype Car = ElectricVehicle & RegularVehicle;\n\nconst AlphaJ: Vehicle = {\n  name: \"Alpha Juls\",\n  category: \"Sedan\",\n  tankCapacity: 38.7,\n  batteryLife: 100,\n  canSelfDrive: true,\n};\n\n// console.log(AlphaJ);\n\n// ARRAY in typescript\nconst grades: number[] = [30, 75, 88, 97, 25, 100];\n// array with different values\nconst studentInfo: (string | number | {})[] = [\n  \"Joseph Kaigus\",\n  15,\n  { history: 75, math: 50, agriculture: 90 },\n];\n\n// console.log(grades);\n// console.log(studentInfo);\n\n// TUPLES in typescript\nlet randomItems: [string, number, boolean];\nrandomItems = [\"jamie\", 30, false];\n// console.log(randomItems);\n\n// VOID and NEVER type\nconst sayHello = (): void => console.log(`Hello World`); // void\nconst raiseAnError = (): never => {\n  throw new Error(\"Just feel like raising an error\");\n};\n\n// sayHello();\n// raiseAnError();\n\n//ENUMS type\nenum Categories {\n  student = \"student\",\n  lecturer = \"lecturer\",\n  headOfDepartment = \"head of department\",\n}\n\ntype LoginPortal = {\n  name: string;\n  id: number;\n  password: string;\n  category: Categories;\n};\n\nconst person: LoginPortal = {\n  name: \"Sarah Alpha\",\n  id: 1665,\n  password: \"i@mQute\",\n  category: Categories.student,\n};\n\nconsole.log(person);\n"],"names":[],"version":3,"file":"index.b0465d9d.js.map","sourceRoot":"../"}