{"mappings":"AAAA,mCAAmC;AACnC,MAAM,UAAU,SACd,IAAY,EACZ,GAAW,EACX,GAAW,EACX,MAAe;IAEf,OAAO,CAAC,MAAM,EAAE,KAAK,OAAO,EAAE,IAAI,UAAU,EAAE,OAAO,OAAO,EAAE,IAAI,CAAC;AACrE;AAEA,MAAM,OAAO,QAAQ,gBAAgB,IAAI,qBAAqB;;AAC9D,qBAAqB;AAErB,0CAA0C;AAC1C,oCAAoC;UAC/B;;;;GAAA,gBAAA;;UAMA;;;GAAA,cAAA;AAoBL,MAAM,UAAkB;IACtB,MAAM;IACN,KAAK;IACL,QAAQ;IACR,WAAW;IACX,SAAS;IACT,UAAU,CAAC,UAAkB,MAAc;QACzC,OAAO,CAAC,EAAE,SAAS,OAAO,EAAE,KAAK,mBAAmB,EAAE,UAAU,cAAc,CAAC;IACjF;AACF;AAEA,MAAM,qBAAqB,SAAU,MAAc;IACjD,OAAO,GAAG,GAAG,OAAO,GAAG,GAAG;IAC1B,OAAO,WAAW;IAClB,OAAO;AACT;AA6BA,MAAM,UAAmB,CACvB,eACA,2BACA,4BACA;IAEA,IAAI,qCAAqC,QAAQ,aAC/C,OAAO;QACL,eAAe;QACf,YAAY;QACZ,eAAe;QACf,aAAa;IACf;SACK,IAAI,OAAO,8BAA8B,UAC9C,OAAO;QACL,eAAe;QACf,eAAe;QACf,aAAa;IACf;IAGF,MAAM,IAAI,MAAM;AAClB;AAEA,QAAQ,GAAG,CAAC,QAAQ,IAAI,QAAQ,IAAI,QAAQ,gBAAgB;AAE5D,QAAQ,GAAG,CAAC,QAAQ,IAAI,QAAQ,gBAAgB","sources":["src/ts-intro/functions.ts"],"sourcesContent":["// Funtion expression in TypeScript\nconst UserBio = function (\n  name: string,\n  age: number,\n  job: string,\n  gender?: string\n): string {\n  return `Name: ${name}\\nAge: ${age}\\nGender: ${gender}\\nJob: ${job}`;\n};\n\nconst info = UserBio(\"Samuel Turay\", 25, \"Software Engineer\", \"M\");\n// console.log(info);\n\n// _______________________________________\n// Custom Parameters and Return type\nenum DateOfBirth {\n  year = \"years\",\n  month = \"months\",\n  day = \"days\",\n}\n\nenum Education {\n  schoolOrUniversity = \"University\",\n  diplomaOrDegree = \"Degree\",\n}\n\ntype greetFunction = (\n  greeting: string,\n  name: string,\n  education: string\n) => string;\n\ntype Person = {\n  name: string;\n  age: number;\n  gender: string;\n  dateOfBirth: DateOfBirth;\n  country: string;\n  sayHello: greetFunction;\n};\n\nconst person1: Person = {\n  name: \"Samuel\",\n  age: 25,\n  gender: \"M\",\n  dateOfBirth: DateOfBirth.year,\n  country: \"Sierra Leone\",\n  sayHello: (greeting: string, name: string, education: string) => {\n    return `${greeting}, I am ${name}, a student of the ${education} of BYU Idaho.`;\n  },\n};\n\nconst convertAgeToMonths = function (person: Person): Person {\n  person.age = person.age * 12;\n  person.dateOfBirth = DateOfBirth.month;\n  return person;\n};\n\n// console.log(convertAgeToMonths(person1));\n// console.log(\n//   person1.sayHello(\"Hello\", person1.name, Education.schoolOrUniversity)\n// );\n\n// Function Overloading\n// trip reservation\n\ntype Reservation = {\n  departureDate: Date;\n  returnDate?: Date;\n  departingFrom: string;\n  destination: string;\n};\n\ntype Reserve = {\n  (\n    departureDate: Date,\n    returnDate: Date,\n    departingFrom: string,\n    destination: string\n  ): Reservation | never;\n  (departureDate: Date, departingFrom: string, destination: string):\n    | Reservation\n    | never;\n};\n\nconst reserve: Reserve = (\n  departureDate: Date,\n  returnDateOrDepartingFrom: Date | string,\n  departingFromOrDestination: string,\n  destination?: string\n) => {\n  if (returnDateOrDepartingFrom instanceof Date && destination) {\n    return {\n      departureDate: departureDate,\n      returnDate: returnDateOrDepartingFrom,\n      departingFrom: departingFromOrDestination,\n      destination: destination,\n    };\n  } else if (typeof returnDateOrDepartingFrom === \"string\") {\n    return {\n      departureDate: departureDate,\n      departingFrom: returnDateOrDepartingFrom,\n      destination: departingFromOrDestination,\n    };\n  }\n\n  throw new Error(\"Please provide valid details to reserve a ticket\");\n};\n\nconsole.log(reserve(new Date(), new Date(), \"Johannesburg\", \"Freetown\"));\n\nconsole.log(reserve(new Date(), \"Johannesburg\", \"Freetown\"));\n"],"names":[],"version":3,"file":"index.08e02114.js.map","sourceRoot":"/__parcel_source_root/"}